{"version":3,"sources":["history.js","components/ItemForm.jsx","apis/exchange.js","actions/index.js","actions/types.js","components/SimpleTable.jsx","components/ItemTables.jsx","utils/calculateAggregatedRows.js","components/List.jsx","components/Received.jsx","components/App.jsx","reducers/itemsReducer.js","reducers/index.js","reducers/receivedItemsReducer.js","reducers/rateReducer.js","index.jsx"],"names":["createBrowserHistory","renderField","Component","input","label","meta","className","error","touched","selected","value","autoComplete","renderError","renderInput","renderDatepicker","DatePicker","reduxForm","form","validate","formValues","errors","name","store","price","isNaN","Number","estDeliveryDate","props","onSubmit","handleSubmit","reset","Field","component","dateFormat","axios","create","baseURL","addItem","item","type","payload","parseFloat","toLocaleDateString","receiveItem","SimpleTable","Table","celled","Header","Row","headers","map","header","HeaderCell","key","Body","rows","row","idx","data","keys","Cell","defaultProps","ItemTables","itemsRows","aggregatedItemsRows","useState","tabIndex","setTabIndex","panes","menuItem","render","Tab","Pane","activeIndex","onTabChange","e","items","exchangeRate","aggregatedRows","reduce","stores","find","sum","push","forEach","toFixed","connect","received","Button","onClick","calculateAggregatedRows","Divider","history","receivedItems","fetchRate","dispatch","a","params","URLSearchParams","append","exchange","get","response","exchangeServiceError","useEffect","interval","setInterval","clearInterval","path","List","Received","INITIAL_STATE","Date","combineReducers","state","action","filter","rates","ILS","formReducer","composeEnchancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","document","querySelector"],"mappings":"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","file":"static/js/main.dface30c.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();\r\n","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nconst renderError = ({ error, touched }) => {\r\n  if (touched && error) {\r\n    return (\r\n      <div className=\"ui error message\">\r\n        <div className=\"header\">{error}</div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst renderField = Component => ({ input, label, meta }) => {\r\n  const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n  return (\r\n    <div className={className}>\r\n      <label>{label}</label>\r\n      <Component selected={input.value} {...input} autoComplete=\"off\" />\r\n      {renderError(meta)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst renderInput = renderField('input');\r\n\r\nconst renderDatepicker = renderField(DatePicker);\r\n\r\nconst ItemForm = props => {\r\n  const onSubmit = formValues => {\r\n    props.onSubmit(formValues);\r\n    props.reset();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit(onSubmit)} className=\"ui form error\">\r\n      <Field name=\"name\" component={renderInput} label=\"Item Name\" />\r\n      <Field name=\"store\" component={renderInput} label=\"Store Name\" />\r\n      <Field name=\"price\" component={renderInput} label=\"Price (USD)\" />\r\n      <Field\r\n        name=\"estDeliveryDate\"\r\n        component={renderDatepicker}\r\n        label=\"Est. Delivery Date\"\r\n        dateFormat=\"DD-MM-YYYY\"\r\n      />\r\n      <button className=\"ui button primary\">Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst validate = formValues => {\r\n  const errors = {};\r\n\r\n  if (!formValues.name) {\r\n    errors.name = 'You must enter an item name';\r\n  }\r\n\r\n  if (!formValues.store) {\r\n    errors.store = 'You must enter a store name';\r\n  }\r\n\r\n  if (!formValues.price) {\r\n    errors.price = 'You must enter a price';\r\n  }\r\n\r\n  if (formValues.price && isNaN(Number(formValues.price))) {\r\n    errors.price = 'You must enter a valid price';\r\n  }\r\n\r\n  if (!formValues.estDeliveryDate) {\r\n    errors.estDeliveryDate = 'You must select a date';\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport default reduxForm({\r\n  form: 'itemForm',\r\n  validate\r\n})(ItemForm);\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://api.exchangeratesapi.io'\r\n});\r\n","import { FETCH_RATE, FETCH_ERROR, ADD_ITEM, RECEIVE_ITEM } from './types';\r\nimport exchange from '../apis/exchange';\r\n\r\nexport const fetchRate = () => async dispatch => {\r\n  const params = new URLSearchParams();\r\n  params.append('symbols', 'ILS');\r\n  params.append('base', 'USD');\r\n  try {\r\n    const response = await exchange.get('latest', params);\r\n\r\n    dispatch({\r\n      type: FETCH_RATE,\r\n      payload: response.data\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: FETCH_ERROR,\r\n      payload: 'exchange service unavailable'\r\n    });\r\n  }\r\n};\r\n\r\nexport const addItem = item => {\r\n  item = {\r\n    ...item,\r\n    price: parseFloat(item.price),\r\n    estDeliveryDate: item.estDeliveryDate.toLocaleDateString()\r\n  };\r\n\r\n  return {\r\n    type: ADD_ITEM,\r\n    payload: item\r\n  };\r\n};\r\n\r\nexport const receiveItem = item => {\r\n  return {\r\n    type: RECEIVE_ITEM,\r\n    payload: item\r\n  };\r\n};\r\n","export const FETCH_RATE = 'FETCH_RATE';\r\nexport const FETCH_ERROR = 'FETCH_ERROR';\r\nexport const ADD_ITEM = 'ADD_ITEM';\r\nexport const RECEIVE_ITEM = 'RECEIVE_ITEM';\r\n","import React from 'react';\r\n\r\nimport { Table } from 'semantic-ui-react';\r\n\r\nconst SimpleTable = props => {\r\n  const renderHeaders = () => {\r\n    return props.headers.map(header => (\r\n      <Table.HeaderCell key={header}>{header}</Table.HeaderCell>\r\n    ));\r\n  };\r\n\r\n  const renderRows = () => {\r\n    return props.rows.map((row, idx) => {\r\n      const data = props.keys.map((key, idx) => (\r\n        <Table.Cell key={idx}>{row[key]}</Table.Cell>\r\n      ));\r\n      return <Table.Row key={idx}>{data}</Table.Row>;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Table celled>\r\n      <Table.Header>\r\n        <Table.Row>{renderHeaders()}</Table.Row>\r\n      </Table.Header>\r\n      <Table.Body>{renderRows()}</Table.Body>\r\n    </Table>\r\n  );\r\n};\r\n\r\nSimpleTable.defaultProps = {\r\n  headers: [],\r\n  keys: [],\r\n  rows: []\r\n};\r\n\r\nexport default SimpleTable;\r\n","import React, { useState } from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\n\r\nimport SimpleTable from './SimpleTable';\r\n\r\nconst ItemTables = ({ itemsRows, aggregatedItemsRows }) => {\r\n  const [tabIndex, setTabIndex] = useState(0);\r\n\r\n  const renderItemsTable = () => {\r\n    return (\r\n      <Tab.Pane>\r\n        <SimpleTable\r\n          headers={[\r\n            'Name',\r\n            'Store',\r\n            'Price (USD/ILS)',\r\n            'Est. Delivery Date',\r\n            'Received?'\r\n          ]}\r\n          keys={['name', 'store', 'price', 'estDeliveryDate', 'received']}\r\n          rows={itemsRows}\r\n        />\r\n      </Tab.Pane>\r\n    );\r\n  };\r\n\r\n  const renderStoresTable = () => {\r\n    return (\r\n      <Tab.Pane>\r\n        <SimpleTable\r\n          headers={['Store', 'Sum of all Orders (USD/ILS)']}\r\n          keys={['name', 'sum']}\r\n          rows={aggregatedItemsRows}\r\n        />\r\n      </Tab.Pane>\r\n    );\r\n  };\r\n\r\n  const panes = [\r\n    {\r\n      menuItem: 'Items',\r\n      render: renderItemsTable\r\n    },\r\n    {\r\n      menuItem: 'Stores',\r\n      render: renderStoresTable\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Tab\r\n      panes={panes}\r\n      activeIndex={tabIndex}\r\n      onTabChange={(e, { activeIndex }) => setTabIndex(activeIndex)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ItemTables;\r\n","export default (items, exchangeRate) => {\r\n  const aggregatedRows = items.reduce((stores, item) => {\r\n    let store = stores.find(store => store.name === item.store);\r\n    if (!store) {\r\n      store = { name: item.store, sum: 0 };\r\n      stores.push(store);\r\n    }\r\n    store.sum += item.price;\r\n    return stores;\r\n  }, []);\r\n\r\n  aggregatedRows.forEach(\r\n    row => (row.sum = `${row.sum} / ${(row.sum * exchangeRate).toFixed(2)}`)\r\n  );\r\n\r\n  return aggregatedRows;\r\n};\r\n","import React from 'react';\r\nimport { Button, Divider } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ItemForm from './ItemForm';\r\nimport { addItem, receiveItem } from '../actions';\r\nimport history from '../history';\r\nimport ItemTables from './ItemTables';\r\nimport calculateAggregatedRows from '../utils/calculateAggregatedRows';\r\n\r\nconst List = ({ items, exchangeRate, addItem, receiveItem }) => {\r\n  const itemsRows = items.map(item => {\r\n    return {\r\n      ...item,\r\n      price: `${item.price} / ${(item.price * exchangeRate).toFixed(2)}`,\r\n      received: <Button onClick={() => receiveItem(item)}>Received</Button>\r\n    };\r\n  });\r\n\r\n  const aggregatedItemsRows = calculateAggregatedRows(items, exchangeRate);\r\n\r\n  return (\r\n    <div>\r\n      <ItemTables\r\n        itemsRows={itemsRows}\r\n        aggregatedItemsRows={aggregatedItemsRows}\r\n      />\r\n      <ItemForm onSubmit={addItem} />\r\n      <Divider />\r\n      <Button onClick={() => history.push('/Erez-Efrat-14-07-2020/received')}>\r\n        Go To Received\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ items, exchangeRate }) => {\r\n  return { items, exchangeRate };\r\n};\r\n\r\nexport default connect(mapStateToProps, { addItem, receiveItem })(List);\r\n","import React from 'react';\r\nimport { Button, Divider } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { addItem, receiveItem } from '../actions';\r\nimport history from '../history';\r\nimport ItemTables from './ItemTables';\r\nimport calculateAggregatedRows from '../utils/calculateAggregatedRows';\r\n\r\nconst Received = ({ receivedItems, exchangeRate }) => {\r\n  const itemsRows = receivedItems.map(item => {\r\n    return {\r\n      ...item,\r\n      price: `${item.price} / ${(item.price * exchangeRate).toFixed(2)}`\r\n    };\r\n  });\r\n\r\n  const aggregatedItemsRows = calculateAggregatedRows(\r\n    receivedItems,\r\n    exchangeRate\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <ItemTables\r\n        itemsRows={itemsRows}\r\n        aggregatedItemsRows={aggregatedItemsRows}\r\n      />\r\n      <Divider />\r\n      <Button onClick={() => history.push('/Erez-Efrat-14-07-2020/List')}>\r\n        Go To List\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ receivedItems, exchangeRate }) => {\r\n  return { receivedItems, exchangeRate };\r\n};\r\n\r\nexport default connect(mapStateToProps, { addItem, receiveItem })(Received);\r\n","import React, { useEffect } from 'react';\r\nimport { Router, Route, Switch } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport history from '../history';\r\nimport List from './List';\r\nimport Received from './Received';\r\nimport { fetchRate } from '../actions';\r\n\r\nconst renderExchangeError = () => {\r\n  return (\r\n    <div className=\"ui error message\">\r\n      <div className=\"header\">{'Exchange Service Unavailable'}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst App = ({ fetchRate, exchangeRate }) => {\r\n  const exchangeServiceError = isNaN(exchangeRate) ? renderExchangeError() : '';\r\n\r\n  useEffect(() => {\r\n    fetchRate();\r\n    const interval = setInterval(() => {\r\n      fetchRate();\r\n    }, 10 * 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"ui container\">\r\n      <Router history={history}>\r\n        <div>\r\n          {exchangeServiceError}\r\n          <Switch>\r\n            <Route path=\"/Erez-Efrat-14-07-2020/list\" component={List} />\r\n            <Route\r\n              path=\"/Erez-Efrat-14-07-2020/received\"\r\n              component={Received}\r\n            />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ exchangeRate }) => {\r\n  return { exchangeRate };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchRate })(App);\r\n","import { ADD_ITEM, RECEIVE_ITEM } from '../actions/types';\r\n\r\nconst INITIAL_STATE = [\r\n  {\r\n    name: 'item 1',\r\n    store: 'amazon',\r\n    price: 20,\r\n    estDeliveryDate: new Date().toLocaleDateString()\r\n  },\r\n  {\r\n    name: 'item 2',\r\n    store: 'ebay',\r\n    price: 30,\r\n    estDeliveryDate: new Date().toLocaleDateString()\r\n  },\r\n  {\r\n    name: 'item 3',\r\n    store: 'ebay',\r\n    price: 40,\r\n    estDeliveryDate: new Date().toLocaleDateString()\r\n  }\r\n];\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case ADD_ITEM:\r\n      return [...state, action.payload];\r\n    case RECEIVE_ITEM:\r\n      return state.filter(item => item.name != action.payload.name);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport itemsReducer from './itemsReducer';\r\nimport rateReducer from './rateReducer';\r\nimport receivedItemsReducer from './receivedItemsReducer';\r\n\r\nexport default combineReducers({\r\n  items: itemsReducer,\r\n  receivedItems: receivedItemsReducer,\r\n  exchangeRate: rateReducer,\r\n  form: formReducer\r\n});\r\n","import { RECEIVE_ITEM } from '../actions/types';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case RECEIVE_ITEM:\r\n      return [...state, action.payload];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { FETCH_RATE, FETCH_ERROR } from '../actions/types';\r\n\r\nexport default (state = 0, action) => {\r\n  switch (action.type) {\r\n    case FETCH_RATE:\r\n      return action.payload.rates.ILS;\r\n    case FETCH_ERROR:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst composeEnchancers =\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnchancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}